title: #PythonMap - Command-Line Basics
---
author: Aleph Melo
---
body:
# The Python Map
Here we begin our journey through the Full Stack Python wonderlands.
<div class="python-map"><img src="pymap.png"></div>

# Command-line arguments
Python has a really handy module called `sys`, using this module we can access to any command-line
arguments via the `sys.argv` which returns a list of the arguments given. 


```python
# file: test_file.py

import sys

print('Argument list: ', str(sys.argv))
print('Argument count: ', len(sys.argv))
```
```
$ python3 test_file.py one two three
('Argument list: ', "['test_file.py', 'one', 'two', 'three']")
('Argument count: ', 4)
```

Note that the first `sys.argv[0]` argument is the file itself.

# Example
Say you want to open a file and print its content via command-line argument.
```python
# file: example.py

import sys

print(open(sys.argv[1], 'r').read()) if len(sys.argv) > 1 else print('You did not pass an argument.')
```
Create a file called `text_sample.txt` with any text in it and the execute our example.
```
$ python3 example.py text_sample.txt
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
```
So let's breakdown the code piece by piece, don't be afraid of this kind of inline conditional. This conditional expression (sometimes called a “ternary operator”) have the lowest priority of all Python operations, but that is not the topic today, we'll get to this on another day.
```python
print(open(sys.argv[1], 'r').read())
```
```
>>> type(open(sys.argv[1], 'r').read())
<class 'str'>
```
Since `open().read()`in this case returns a `<str>` we can pass it directly to `print()` as parameter. But this piece of code is only assigned if `len(sys.argv) > 1` which means:
```
$ python3 <file.py> <file.txt>
```
The `else` part is pretty much self-explanatory. 

This kind of parsing is pretty raw, for a better parsing and options there is other python bult-in module called `argparse` that provides many more options and easy ways to parse arguments.

That's it, this was my first post, don't worry I'll try to improve and bring some really cool subjects. If you see an error (specially grammar, since english is my second language), don't hesitate to bring it up and comment so I can fix it. And thank you for reading, cheers. 

# Recommended reading

- [Conditional Expressions](https://docs.python.org/3.5/reference/expressions.html#conditional-expressions)
- [Argparse Docs](https://docs.python.org/3/library/argparse.html)
- [System-specific parameters and functions](https://docs.python.org/3.5/library/sys.html?highlight=sys.argv#sys.argv)
---
pub_date: 2016-02-15
---
tags:

python
dev
python-map
---
twitter_handle: Alephbreno
---
summary:

Python has a really handy module called `sys`, using this module we can access to any command-line arguments via the `sys.argv` which returns a list of the arguments given. 
---
_slug: command-line-basics
